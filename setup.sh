#!/bin/bash

# setup.sh creates a new Google Cloud project and deploys the application.
#
# TODO:
# - Accept command line args for interactive prompts.
# - Output is messy right now, gcloud command output should be captured.
# - Gracefully handle gcloud command failures.

# Exit on command error, unset vars, errors inside of pipes.
set -euo pipefail


###############################################################################
# Functions

# Terminal color codes and reset.
red=$(printf "\e[31m")
green=$(printf "\e[32m")
yellow=$(printf "\e[33m")
bold=$(printf "\e[1m")
TR=$(printf "\e[0m")

# Print the error message and exit.
err() {
	echo "$@" >&2 && exit 1
}

# Print a string of random numbers $1 digits long.
rand_id() {
	for i in `seq 1 $1`; do echo -n $(( RANDOM % 10 )); done
}

check_dependencies() {
	[[ $(type -P "gcloud") ]] || err "Please install Google Cloud SDK: https://cloud.google.com/sdk/install"
	[[ $(type -P "docker") ]] || err "Please install Docker (Community Edition): https://docs.docker.com/engine/installation/"
	
	# glcoud will install it's own kubectl, so this is not necessary.
	#[[ $(type -P "kubectl") ]] || err "Please install Kubernetes: https://kubernetes.io/docs/tasks/tools/install-kubectl/"

	# For when terraform is implemented
	#[[ $(type -P "terraform") ]] || err "Please install Terraform: https://www.terraform.io/downloads.html"
}

# Write variables to config.sh
write_config() {
	echo -e "Writing project variables to config.sh\n"
	cat <<-EOD >config.sh
		# This file generated by setup.sh.
		# The \$image_ver is increased in this file every time deploy.sh is run.
		
		project="kabosu-seed"

		# Cloud project id. Must be globally unique.
		project_id="$project_id"

		# GKE cluster name
		cluster="\$project-cluster"

		image_ver=1

		# The docker image name, also the URL for storing the image at GCR
		image="gcr.io/\$project_id/\$project:v\$image_ver"
	EOD
}


###############################################################################
# Init

check_dependencies

# Ensure we are in script directory
cd "${0%/*}"


###############################################################################
# Google Cloud project creation and config.sh management

if [[ -f config.sh ]]; then
	echo "config.sh found. Skipping project creation, running with existing config."
	sleep 3

	source config.sh
	gcloud config set project $project_id

else
	cat <<-EOD && 
		This setup script will create a new Google Cloud project and deploy the
		application.

		A unique project ID has been generated for you, or you can set your own.

	EOD

	# Cloud project id. Must be globally unique. This isn't perfect but is good enough.
	project_id="kabosu-seed-$(rand_id 12)"
	read -p	"Goole Cloud project ID <$project_id>: " user_input

	[[ ! -z $user_input ]] && project_id=$user_input
		
	# This could fail if our random ID collides. This is unlikely and so we don't
	# handle it yet. The user should just run the setup script again if it does.
	gcloud projects create $project_id --set-as-default

	write_config
	source config.sh
fi


###############################################################################
# Billing
#
# Billing needs to be enabled for this project or docker push will error with
# a vague token error :(

gcloud components install beta

echo -e "\nA billing account must be linked to this project. Here are your current accounts:"
billing_accounts=$(gcloud beta billing accounts list)
cat <<<"$billing_accounts"
echo

# Extract ID of first account for default. jq with --format=json might be better,
# but we will do this oldschool to avoid another dependency.
billing_id=$(cat <<<"$billing_accounts" | awk 'FNR==2 {print $1}')

read -p	"Billing ID <$billing_id>: " user_input

[[ ! -z $user_input ]] && billing_id=$user_input

gcloud beta billing projects link $project_id --billing-account=$billing_id


###############################################################################
# Remainder of setup

# Show the commands that are run.
# As this script new, this makes debugging easier.
set -x

# This should be a parameter, but I'm running out of time.
gcloud config set compute/zone us-central1-b

gcloud components install kubectl

# Enable Container Registry
gcloud services enable containerregistry.googleapis.com
# Enable Kubernetes Engine API
gcloud services enable container.googleapis.com

# Configure docker to authenticate to Google's registry
gcloud auth configure-docker

docker build -t $image .

# Pushes image to GCR
docker push $image

# Create the pool of VMs that will host kubernetes
gcloud container clusters create $cluster --num-nodes=3 \
	--enable-autoscaling --min-nodes 3 --max-nodes 15
gcloud compute instances list

kubectl run $project --image=$image --port 80
kubectl autoscale deployment $project --min 3 --max 15 --cpu-percent 50
kubectl get pods

# Create a kubernetes service with networking and IP support
# GKE creates an external IP and a load balancer
kubectl expose deployment $project --type=LoadBalancer --port 80 --target-port 80

set +x

cat <<-EOD

	ðŸ“£  ${green}Done!$TR An external IP is currently being allocated.
	
	Please wait a minute and then run: kubectl get service

	Go to the External IP in your browser to view the app.

EOD
